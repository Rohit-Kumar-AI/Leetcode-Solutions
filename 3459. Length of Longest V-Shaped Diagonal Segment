#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static const int DIRS[4][2] = { {-1, 1}, {1, 1}, {1, -1}, {-1, -1} };
#define IDX(i,j,t,ns,d,n) (((((((i)*(n)) + (j)) * 2 + (t)) * 2 + (ns)) * 4) + (d))

static int dfs(int **grid, int m, int n,
               int i, int j, int turned, int expected, int dir,
               int *memo) {
    if (i < 0 || i >= m || j < 0 || j >= n) return 0;
    if (grid[i][j] != expected) return 0;
    int numState = (expected == 2) ? 0 : 1;
    int idx = IDX(i, j, turned, numState, dir, n);
    if (memo[idx] != -1) return memo[idx];
    int nextExpected = (expected == 2) ? 0 : 2;
    int dx = DIRS[dir][0], dy = DIRS[dir][1];
    int best = 1 + dfs(grid, m, n, i + dx, j + dy, turned, nextExpected, dir, memo);
    if (!turned) {
        int nextDir = (dir + 1) % 4;
        int ndx = DIRS[nextDir][0], ndy = DIRS[nextDir][1];
        int candidate = 1 + dfs(grid, m, n, i + ndx, j + ndy, 1, nextExpected, nextDir, memo);
        if (candidate > best) best = candidate;
    }
    memo[idx] = best;
    return best;
}

int lenOfVDiagonal(int** grid, int gridSize, int* gridColSize){
    int m = gridSize;
    if (m == 0) return 0;
    int n = gridColSize[0];
    long long total = (long long)m * n * 2 * 2 * 4;
    int *memo = (int *)malloc(sizeof(int) * total);
    for (long long k = 0; k < total; ++k) memo[k] = -1;
    int ans = 0;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == 1) {
                for (int d = 0; d < 4; ++d) {
                    int dx = DIRS[d][0], dy = DIRS[d][1];
                    int candidate = 1 + dfs(grid, m, n, i + dx, j + dy, 0, 2, d, memo);
                    if (candidate > ans) ans = candidate;
                }
            }
        }
    }
    free(memo);
    return ans;
}
